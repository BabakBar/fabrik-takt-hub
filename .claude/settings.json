{
  "includeCoAuthoredBy": false,
  
  "env": {
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "CLAUDE_CODE_ENABLE_UNIFIED_READ_TOOL": "1",
    "CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC": "1",
    "ENABLE_BACKGROUND_TASKS": "1",
    "FORCE_AUTO_BACKGROUND_TASKS": "1",
    "DISABLE_PROMPT_CACHING": "0",
    "MAX_THINKING_TOKENS": "50000",
    "DISABLE_TELEMETRY": "1",
    "DISABLE_ERROR_REPORTING": "1"
  },

  "permissions": {
    "allow": [
      "Bash(bun:*)",
      "Bash(npm:*)",
      "Bash(pnpm:*)",
      "Bash(yarn:*)",
      "Bash(git:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(fd:*)",
      "Bash(rg:*)",
      "Bash(jq:*)",
      "Bash(node:*)",
      "Bash(npx:*)",
      "Bash(bunx:*)",
      "Bash(tsc:*)",
      "Bash(vite:*)",
      "Bash(vitest:*)",
      "Bash(eslint:*)",
      "Bash(prettier:*)",
      "Bash(playwright:*)",
      "Bash(cypress:*)",
      "Bash(docker:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(ps:*)",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(ping:*)",
      "Bash(tree:*)",
      "Bash(wc:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(diff:*)",
      "Bash(patch:*)",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(du:*)",
      "Bash(df:*)",
      "Bash(chmod:*)",
      "Bash(chown:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(ln:*)",
      "Bash(touch:*)",
      "Bash(echo:*)",
      "Bash(printf:*)",
      "Read(src/**)",
      "Read(public/**)",
      "Read(docs/**)",
      "Read(.claude/**)",
      "Read(*.json)",
      "Read(*.js)",
      "Read(*.ts)",
      "Read(*.tsx)",
      "Read(*.jsx)",
      "Read(*.css)",
      "Read(*.scss)",
      "Read(*.md)",
      "Read(*.mdx)",
      "Read(*.yml)",
      "Read(*.yaml)",
      "Read(*.toml)",
      "Read(*.env*)",
      "Read(.git*)",
      "Read(README*)",
      "Read(LICENSE*)",
      "Read(CHANGELOG*)",
      "Read(vite.config.*)",
      "Read(tailwind.config.*)",
      "Read(tsconfig.*)",
      "Read(eslint.config.*)",
      "Read(postcss.config.*)",
      "Read(playwright.config.*)",
      "Read(vitest.config.*)",
      "Read(components.json)",
      "Read(bun.lockb)",
      "Read(package-lock.json)",
      "Read(yarn.lock)",
      "Read(pnpm-lock.yaml)"
    ]
  },

  "hooks": {
    "SessionStart": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] ===== CLAUDE CODE SESSION STARTED =====\" >> ~/.claude/fabriktakt-session.log && echo \"Session ID: $(date '+%s')\" >> ~/.claude/fabriktakt-session.log && echo \"Working Directory: $(pwd)\" >> ~/.claude/fabriktakt-session.log && echo \"Git Branch: $(git branch --show-current 2>/dev/null || echo 'N/A')\" >> ~/.claude/fabriktakt-session.log && echo \"Git Status: $(git status --porcelain 2>/dev/null | wc -l || echo '0') files modified\" >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [BASH-PRE] Command: \" + .tool_input.command + \" | Description: \" + (.tool_input.description // \"No description\") + \" | Timeout: \" + (.tool_input.timeout // \"default\" | tostring) + \"ms | Working Dir: \" + (env.PWD // \"unknown\")' >> ~/.claude/fabriktakt-commands.log"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys, os, hashlib, stat; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); tool_name=data.get('tool_name',''); sensitive=['.env', 'bun.lockb', 'package-lock.json', '.git/', 'node_modules/']; [sys.exit(2) if any(p in path for p in sensitive) else None]; file_exists=os.path.exists(path); file_size=os.path.getsize(path) if file_exists else 0; file_perms=oct(stat.S_IMODE(os.lstat(path).st_mode)) if file_exists else 'N/A'; print(f'[{data.get(\"timestamp\", \"unknown\")}] [FILE-PRE] Tool: {tool_name} | Path: {path} | Exists: {file_exists} | Size: {file_size}B | Perms: {file_perms} | Dir: {os.path.dirname(path) or \".\"}')\""
          }
        ]
      },
      {
        "matcher": "Read|LS|Glob|Grep",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [READ-PRE] Tool: \" + .tool_name + \" | Target: \" + (.tool_input.file_path // .tool_input.path // .tool_input.pattern // \"multiple\") + \" | Params: \" + (.tool_input | to_entries | map(\"\\(.key)=\\(.value)\") | join(\", \"))' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [TASK-PRE] Description: \" + (.tool_input.description // \"No description\") + \" | Prompt Length: \" + (.tool_input.prompt | length | tostring) + \" chars\"' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "TodoRead|TodoWrite",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [TODO-PRE] Tool: \" + .tool_name + \" | Items: \" + (if .tool_input.todos then (.tool_input.todos | length | tostring) else \"read\" end)' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "WebFetch|WebSearch",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [WEB-PRE] Tool: \" + .tool_name + \" | URL/Query: \" + (.tool_input.url // .tool_input.query // \"unknown\") + \" | Prompt: \" + (.tool_input.prompt // \"N/A\")' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "NotebookEdit|mcp__ide__executeCode|mcp__ide__getDiagnostics",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [IDE-PRE] Tool: \" + .tool_name + \" | Context: \" + (.tool_input | keys | join(\", \"))' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [BASH-POST] Exit Code: \" + (.tool_result.exit_code // \"unknown\" | tostring) + \" | Output Length: \" + (.tool_result.stdout // \"\" | length | tostring) + \" chars | Error Length: \" + (.tool_result.stderr // \"\" | length | tostring) + \" chars | Duration: \" + (.tool_result.duration_ms // \"unknown\" | tostring) + \"ms\"' >> ~/.claude/fabriktakt-commands.log"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys, os, hashlib; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); success=data.get('tool_result',{}).get('success',False); tool_name=data.get('tool_name',''); new_size=os.path.getsize(path) if os.path.exists(path) else 0; with open(path, 'rb') if os.path.exists(path) else None as f: content_hash=hashlib.md5(f.read() if f else b'').hexdigest()[:8]; print(f'[{data.get(\"timestamp\", \"unknown\")}] [FILE-POST] Tool: {tool_name} | Path: {os.path.basename(path)} | Success: {success} | New Size: {new_size}B | Content Hash: {content_hash}')\""
          },
          {
            "type": "command",
            "command": "python3 .claude/hooks/format_on_save.py"
          }
        ]
      },
      {
        "matcher": "Read|LS|Glob|Grep",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [READ-POST] Tool: \" + .tool_name + \" | Success: \" + (if .tool_result.error then \"false\" else \"true\" end) + \" | Results: \" + (if .tool_result.files then (.tool_result.files | length | tostring) + \" files\" elif .tool_result.content then (.tool_result.content | length | tostring) + \" chars\" else \"N/A\" end)' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [TASK-POST] Success: \" + (if .tool_result.error then \"false\" else \"true\" end) + \" | Response Length: \" + (.tool_result.content // \"\" | length | tostring) + \" chars | Agent: \" + (.tool_result.agent_used // \"default\")' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "TodoRead|TodoWrite",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [TODO-POST] Tool: \" + .tool_name + \" | Success: \" + (if .tool_result.error then \"false\" else \"true\" end) + \" | Items Count: \" + (if .tool_result.todos then (.tool_result.todos | length | tostring) else \"N/A\" end) + \" | Statuses: \" + (if .tool_result.todos then (.tool_result.todos | group_by(.status) | map(\"\\(.[0].status):\\(length)\") | join(\", \")) else \"N/A\" end)' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "WebFetch|WebSearch",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [WEB-POST] Tool: \" + .tool_name + \" | Success: \" + (if .tool_result.error then \"false\" else \"true\" end) + \" | Response Length: \" + (.tool_result.content // \"\" | length | tostring) + \" chars | Cache Hit: \" + (.tool_result.cached // \"unknown\" | tostring)' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      },
      {
        "matcher": "NotebookEdit|mcp__ide__executeCode|mcp__ide__getDiagnostics",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [IDE-POST] Tool: \" + .tool_name + \" | Success: \" + (if .tool_result.error then \"false\" else \"true\" end) + \" | Response: \" + (.tool_result | keys | join(\", \"))' >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [USER-PROMPT] Length: $(echo \"$CLAUDE_USER_MESSAGE\" | wc -c || echo '0') chars | Words: $(echo \"$CLAUDE_USER_MESSAGE\" | wc -w || echo '0') | Lines: $(echo \"$CLAUDE_USER_MESSAGE\" | wc -l || echo '0') | Session Duration: $(($(date +%s) - ${CLAUDE_SESSION_START:-$(date +%s)}))s\" >> ~/.claude/fabriktakt-session.log"
          },
          {
            "type": "command",
            "command": "git status --porcelain 2>/dev/null | wc -l | xargs -I {} echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [GIT-STATUS] {} files modified since session start\" >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "AssistantResponseStart": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [RESPONSE-START] Claude is processing request...\" >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "AssistantResponseEnd": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [RESPONSE-END] Claude response completed | Response Length: ${CLAUDE_RESPONSE_LENGTH:-0} chars | Tools Used: ${CLAUDE_TOOLS_USED:-0} | Processing Time: ${CLAUDE_RESPONSE_TIME:-0}ms\" >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [SESSION-SUMMARY] Total Duration: $(($(date +%s) - ${CLAUDE_SESSION_START:-$(date +%s)}))s | Commands Run: $(wc -l ~/.claude/fabriktakt-commands.log 2>/dev/null | cut -d' ' -f1 || echo '0') | Files Modified: $(git status --porcelain 2>/dev/null | wc -l || echo '0') | Git Branch: $(git branch --show-current 2>/dev/null || echo 'N/A')\" >> ~/.claude/fabriktakt-session.log && echo \"[$(date '+%Y-%m-%d %H:%M:%S')] ===== CLAUDE CODE SESSION ENDED =====\" >> ~/.claude/fabriktakt-session.log"
          }
        ]
      }
    ],
    "Error": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] [ERROR] Tool: \" + (.tool_name // \"unknown\") + \" | Error Type: \" + (.error.type // \"unknown\") + \" | Message: \" + (.error.message // \"unknown\") + \" | Code: \" + (.error.code // \"unknown\" | tostring)' >> ~/.claude/fabriktakt-errors.log"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [NOTIFICATION] Claude Code notification | Type: ${CLAUDE_NOTIFICATION_TYPE:-general} | Context: ${CLAUDE_NOTIFICATION_CONTEXT:-none}\" >> ~/.claude/fabriktakt-notifications.log"
          }
        ]
      }
    ]
  }
}